//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scenes/-Scripts/Control/Input/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""6e8488e1-6abc-44be-b60f-f0f2b742dd86"",
            ""actions"": [
                {
                    ""name"": ""ControlKb"",
                    ""type"": ""Value"",
                    ""id"": ""77f2e2a1-b61b-4eb2-bccb-1cb8343aae54"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControlMouse"",
                    ""type"": ""Value"",
                    ""id"": ""1a49eaae-7f76-4637-a0d5-ea0f29ba344e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""63e9e5e5-edeb-40c6-bf0c-da924e858c61"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlKb"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""c857b439-c2e7-48ce-a1bd-bfda0b27ea86"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""ControlKb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""77a917c9-425f-47eb-8edf-47f2aa834c99"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""ControlKb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""2b8018b7-3719-452d-bb62-93c29e1ce392"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""ControlKb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""93ec3872-9429-409c-b67a-85923d4e1bfb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""ControlKb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""97eaed99-13fb-4de1-a6af-2508d55a7b2c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlKb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""d941d829-988d-4127-a97f-c51834b13e48"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlKb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d00141c7-fd69-40e8-a3fa-60831881b47a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""ControlMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": [
                {
                    ""devicePath"": ""<OculusHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_ControlKb = m_Plane.FindAction("ControlKb", throwIfNotFound: true);
        m_Plane_ControlMouse = m_Plane.FindAction("ControlMouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private IPlaneActions m_PlaneActionsCallbackInterface;
    private readonly InputAction m_Plane_ControlKb;
    private readonly InputAction m_Plane_ControlMouse;
    public struct PlaneActions
    {
        private @Control m_Wrapper;
        public PlaneActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @ControlKb => m_Wrapper.m_Plane_ControlKb;
        public InputAction @ControlMouse => m_Wrapper.m_Plane_ControlMouse;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void SetCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterface != null)
            {
                @ControlKb.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnControlKb;
                @ControlKb.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnControlKb;
                @ControlKb.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnControlKb;
                @ControlMouse.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnControlMouse;
                @ControlMouse.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnControlMouse;
                @ControlMouse.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnControlMouse;
            }
            m_Wrapper.m_PlaneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ControlKb.started += instance.OnControlKb;
                @ControlKb.performed += instance.OnControlKb;
                @ControlKb.canceled += instance.OnControlKb;
                @ControlMouse.started += instance.OnControlMouse;
                @ControlMouse.performed += instance.OnControlMouse;
                @ControlMouse.canceled += instance.OnControlMouse;
            }
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    public interface IPlaneActions
    {
        void OnControlKb(InputAction.CallbackContext context);
        void OnControlMouse(InputAction.CallbackContext context);
    }
}
